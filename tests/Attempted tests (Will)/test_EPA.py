'''''
aguaclara_research tests.
'''''

import unittest
from aguaclara_research.Environmental_Processes_Analysis import *
import Environmental_Processes_Analysis.py


class TestUtils(unittest.TestCase):
    '''''
    Test aguaclara_research's Environmental_Processes_Analysis
    '''''

    def setUp(self):
        pass

    def test_time_column_extraction(self):
        '''''
        Extract the time column from a data file.
        '''''
        answer = ftime(
            'Lab5Part2(CMFR_Final).xls',
            50,
            -1
        )
        answer = np.round(answer,5)
        self.assertEqual(
            answer,
            np.round(np.array([  0.00000000e+00,   5.78662000e-05,   1.15725500e-04,
         1.73586900e-04,   2.31470400e-04,   2.89325100e-04,
         3.47199600e-04,   4.05070800e-04,   4.62941200e-04,
         5.20805100e-04,   5.78682300e-04,   6.36541000e-04,
         6.94405500e-04,   7.52295200e-04,   8.10152600e-04,
         8.68025100e-04,   9.25879200e-04,   9.83766900e-04,
         1.04163170e-03,   1.09949610e-03,   1.15736260e-03,
         1.21522990e-03,   1.27310590e-03,   1.33096560e-03,
         1.38884810e-03,   1.44671260e-03,   1.50456890e-03,
         1.56244910e-03,   1.62031940e-03,   1.67819090e-03,
         1.73605480e-03,   1.79390590e-03,   1.85178640e-03,
         1.90965780e-03,   1.96752080e-03,   2.02538760e-03,
         2.08325540e-03,   2.14113380e-03,   2.19899280e-03,
         2.25686180e-03,   2.31473400e-03,   2.37261100e-03,
         2.43048170e-03,   2.48834570e-03,   2.54620210e-03,
         2.60408890e-03,   2.66194550e-03,   2.71981170e-03,
         2.77768240e-03,   2.83556180e-03,   2.89342620e-03,
         2.95130110e-03,   3.00916580e-03,   3.06704400e-03,
         3.12490300e-03,   3.18278490e-03,   3.24064920e-03,
         3.29852180e-03,   3.35638230e-03,   3.41425150e-03,
         3.47212870e-03,   3.52999870e-03,   3.58786830e-03,
         3.64572740e-03,   3.70359810e-03,   3.76146930e-03,
         3.81933520e-03,   3.87721010e-03,   3.93506860e-03,
         3.99295440e-03,   4.05082240e-03,   4.10868470e-03,
         4.16654890e-03,   4.22442890e-03,   4.28230160e-03,
         4.34016650e-03,   4.39804130e-03,   4.45591720e-03,
         4.51377060e-03,   4.57164920e-03,   4.62952340e-03,
         4.68739510e-03,   4.74524320e-03,   4.80312930e-03,
         4.86098350e-03,   4.91887450e-03,   4.97673430e-03,
         5.03459310e-03,   5.09248050e-03,   5.15033640e-03,
         5.20820950e-03,   5.26607440e-03,   5.32394690e-03,
         5.38181660e-03,   5.43967960e-03,   5.49755470e-03,
         5.55543130e-03,   5.61330110e-03,   5.67117330e-03,
         5.72903190e-03,   5.78690100e-03,   5.84477570e-03,
         5.90264880e-03,   5.96051240e-03,   6.01837960e-03,
         6.07625150e-03,   6.13413050e-03,   6.19199110e-03,
         6.24987260e-03,   6.30772900e-03,   6.36560880e-03,
         6.42346920e-03,   6.48135320e-03,   6.53921020e-03,
         6.59709090e-03,   6.65494290e-03,   6.71281870e-03,
         6.77069570e-03,   6.82855640e-03])*u.day,5)
        )

    def test_column_extraction(self):
        '''''
        Extract other columns of data and append units.
        '''''
        answer = Column_of_data(
        'Lab5Part2(CMFR_Final).xls',
        50,
        -1,
        1,
        'mg/L'
        )
        answer = np.round(answer,5)
        self.assertEqual(
        answer,
        np.round(np.array([ 21.61681747,  21.31163216,  20.80215263,  20.46752739,
        20.1048584 ,  19.7037487 ,  19.4194355 ,  18.95934677,
        18.65832138,  18.24054337,  17.93864632,  17.591259  ,
        17.25979805,  16.98148346,  16.60666656,  16.28514862,
        15.99366856,  15.72474861,  15.35812187,  15.11634636,
        14.75801468,  14.53341103,  14.20829868,  13.94124603,
        13.69845104,  13.42016983,  13.17064667,  12.94155121,
        12.66110611,  12.36821651,  12.1641016 ,  11.91081715,
        11.69137764,  11.46448898,  11.2214098 ,  11.03143692,
        10.78680801,  10.56936836,  10.36802101,  10.17097855,
         9.95537758,   9.78312111,   9.55150509,   9.3843832 ,
         9.21883678,   9.03395939,   8.85475636,   8.68857765,
         8.47574997,   8.33256149,   8.13628197,   7.96697569,
         7.80458403,   7.68562984,   7.4511261 ,   7.34629679,
         7.17365456,   7.03930044,   6.88661861,   6.73307562,
         6.60730886,   6.45987988,   6.30656338,   6.18089199,
         6.05378485,   5.90268421,   5.81327915,   5.68042564,
         5.57657337,   5.40122986,   5.33153057,   5.19660377,
         5.09033108,   4.96228552,   4.85437012,   4.76652002,
         4.66415834,   4.54592991,   4.43500376,   4.34614754,
         4.24292231,   4.16423607,   4.06328297,   3.96581864,
         3.88231015,   3.7828486 ,   3.74253488,   3.62953901,
         3.53508115,   3.46755266,   3.36818004,   3.30672598,
         3.22161722,   3.13899183,   3.08345532,   2.98398542,
         2.94956589,   2.8504107 ,   2.79215455,   2.72924852,
         2.66635823,   2.60831141,   2.53093195,   2.47217631,
         2.42190933,   2.36228228,   2.30094266,   2.24602866,
         2.19216943,   2.14143515,   2.10641694,   2.07170939,
         2.04412961,   2.0158174 ,   2.00059986,   1.98546684,
         1.97646523,   1.96455812,   1.95887971])*u('mg/L'),5)
        )

    def test_file_notes_function(self):
        '''''
        Test function that extracts meta information from data file.
        '''''
        answer = notes('Lab5Part2(CMFR_Final).xls')['Day fraction since midnight on ']
        x = pd.DataFrame(index=[1,29,35],columns=['Day fraction since midnight on ', 'red dye (mg/L)', 'Run Pump ()', 'Pump ()'])
        x.iloc[0][0]='Start'
        x.iloc[1][0]='Start'
        x.iloc[2][0]='30 mg/L'
        self.assertEqual(
        answer,
        x['Day fraction since midnight on ']
        )

    def test_Hplus_concentration_from_pH(self):
        '''''
        Test function that converts pH to molarity of H+
        '''''
        answer = invph(
        8.25
        )
        self.assertEqual(
        answer,
        5.623413251903491e-09*u.mol/u.L
        )

    def
