"""
tests for the aguaclara_research package's ProCoDA parsing functions
"""

import unittest
from aguaclara_research.ProCoDA_Parser import *

class TestProCoDAParser(unittest.TestCase):

    def test_ftime(self):
        '''''
        Extract the time column from a data file.
        '''''
        path = os.path.join(os.path.dirname(__file__), '.', 'data', 'Lab5Part2(CMFR_Final).xls')
        answer = ftime(path, 50, -1)
        answer = np.round(answer, 5)
        self.assertSequenceEqual(
         answer.tolist(),
         np.round(np.array([0.00000000e+00,   5.78662000e-05,   1.15725500e-04,
         1.73586900e-04,   2.31470400e-04,   2.89325100e-04,
         3.47199600e-04,   4.05070800e-04,   4.62941200e-04,
         5.20805100e-04,   5.78682300e-04,   6.36541000e-04,
         6.94405500e-04,   7.52295200e-04,   8.10152600e-04,
         8.68025100e-04,   9.25879200e-04,   9.83766900e-04,
         1.04163170e-03,   1.09949610e-03,   1.15736260e-03,
         1.21522990e-03,   1.27310590e-03,   1.33096560e-03,
         1.38884810e-03,   1.44671260e-03,   1.50456890e-03,
         1.56244910e-03,   1.62031940e-03,   1.67819090e-03,
         1.73605480e-03,   1.79390590e-03,   1.85178640e-03,
         1.90965780e-03,   1.96752080e-03,   2.02538760e-03,
         2.08325540e-03,   2.14113380e-03,   2.19899280e-03,
         2.25686180e-03,   2.31473400e-03,   2.37261100e-03,
         2.43048170e-03,   2.48834570e-03,   2.54620210e-03,
         2.60408890e-03,   2.66194550e-03,   2.71981170e-03,
         2.77768240e-03,   2.83556180e-03,   2.89342620e-03,
         2.95130110e-03,   3.00916580e-03,   3.06704400e-03,
         3.12490300e-03,   3.18278490e-03,   3.24064920e-03,
         3.29852180e-03,   3.35638230e-03,   3.41425150e-03,
         3.47212870e-03,   3.52999870e-03,   3.58786830e-03,
         3.64572740e-03,   3.70359810e-03,   3.76146930e-03,
         3.81933520e-03,   3.87721010e-03,   3.93506860e-03,
         3.99295440e-03,   4.05082240e-03,   4.10868470e-03,
         4.16654890e-03,   4.22442890e-03,   4.28230160e-03,
         4.34016650e-03,   4.39804130e-03,   4.45591720e-03,
         4.51377060e-03,   4.57164920e-03,   4.62952340e-03,
         4.68739510e-03,   4.74524320e-03,   4.80312930e-03,
         4.86098350e-03,   4.91887450e-03,   4.97673430e-03,
         5.03459310e-03,   5.09248050e-03,   5.15033640e-03,
         5.20820950e-03,   5.26607440e-03,   5.32394690e-03,
         5.38181660e-03,   5.43967960e-03,   5.49755470e-03,
         5.55543130e-03,   5.61330110e-03,   5.67117330e-03,
         5.72903190e-03,   5.78690100e-03,   5.84477570e-03,
         5.90264880e-03,   5.96051240e-03,   6.01837960e-03,
         6.07625150e-03,   6.13413050e-03,   6.19199110e-03,
         6.24987260e-03,   6.30772900e-03,   6.36560880e-03,
         6.42346920e-03,   6.48135320e-03,   6.53921020e-03,
         6.59709090e-03,   6.65494290e-03,   6.71281870e-03,
         6.77069570e-03,   6.82855640e-03])*u.day, 5).tolist()
        )

    def test_column_of_data(self):
        '''''
        Extract other columns of data and append units.
        '''''
        path = os.path.join(os.path.dirname(__file__), '.', 'data', 'Lab5Part2(CMFR_Final).xls')
        answer = column_of_data(path, 50, 1, -1, 'mg/L')
        answer = np.round(answer, 5)
        self.assertSequenceEqual(
        answer.tolist(),
        np.round(np.array([ 21.61681747,  21.31163216,  20.80215263,  20.46752739,
        20.1048584 ,  19.7037487 ,  19.4194355 ,  18.95934677,
        18.65832138,  18.24054337,  17.93864632,  17.591259  ,
        17.25979805,  16.98148346,  16.60666656,  16.28514862,
        15.99366856,  15.72474861,  15.35812187,  15.11634636,
        14.75801468,  14.53341103,  14.20829868,  13.94124603,
        13.69845104,  13.42016983,  13.17064667,  12.94155121,
        12.66110611,  12.36821651,  12.1641016 ,  11.91081715,
        11.69137764,  11.46448898,  11.2214098 ,  11.03143692,
        10.78680801,  10.56936836,  10.36802101,  10.17097855,
         9.95537758,   9.78312111,   9.55150509,   9.3843832 ,
         9.21883678,   9.03395939,   8.85475636,   8.68857765,
         8.47574997,   8.33256149,   8.13628197,   7.96697569,
         7.80458403,   7.68562984,   7.4511261 ,   7.34629679,
         7.17365456,   7.03930044,   6.88661861,   6.73307562,
         6.60730886,   6.45987988,   6.30656338,   6.18089199,
         6.05378485,   5.90268421,   5.81327915,   5.68042564,
         5.57657337,   5.40122986,   5.33153057,   5.19660377,
         5.09033108,   4.96228552,   4.85437012,   4.76652002,
         4.66415834,   4.54592991,   4.43500376,   4.34614754,
         4.24292231,   4.16423607,   4.06328297,   3.96581864,
         3.88231015,   3.7828486 ,   3.74253488,   3.62953901,
         3.53508115,   3.46755266,   3.36818004,   3.30672598,
         3.22161722,   3.13899183,   3.08345532,   2.98398542,
         2.94956589,   2.8504107 ,   2.79215455,   2.72924852,
         2.66635823,   2.60831141,   2.53093195,   2.47217631,
         2.42190933,   2.36228228,   2.30094266,   2.24602866,
         2.19216943,   2.14143515,   2.10641694,   2.07170939,
         2.04412961,   2.0158174 ,   2.00059986,   1.98546684,
         1.97646523,   1.96455812,   1.95887971])*u('mg/L'), 5).tolist()
        )

    def test_notes(self):
        '''''
        Test function that extracts meta information from data file.
        '''''
        path = os.path.join(os.path.dirname(__file__), '.', 'data', 'Lab5Part2(CMFR_Final).xls')
        answer = notes(path)['Day fraction since midnight on ']
        x = pd.DataFrame(index=[1, 29, 35],
                         columns=['Day fraction since midnight on ', 'red dye (mg/L)', 'Run Pump ()', 'Pump ()'])
        x.iloc[0][0] = 'Start'
        x.iloc[1][0] = 'Start'
        x.iloc[2][0] = '30 mg/L'
        self.assertSequenceEqual(
        answer.tolist(),
        x['Day fraction since midnight on '].tolist())

    def test_read_state(self):
        path = os.path.join(os.path.dirname(__file__), '.', 'data', '')
        time, data = read_state(["6-19-2013", "6-20-2013"], 1, 28, "mL/s", path)
        time = np.round(time, 5)
        self.assertSequenceEqual(
        time.tolist()[1000:1100],
        np.round(
        [0.10189837999999996, 0.10190995999999997, 0.10192152999999993,
         0.10193310999999994, 0.10194468000000001, 0.10195624999999997,
         0.10196782999999998, 0.10197939999999994, 0.10199097999999995,
         0.10200254999999991, 0.10201412999999993, 0.1020257,
         0.10203726999999996, 0.10204884999999997, 0.10206041999999993,
         0.10207199999999994, 0.10208357000000001, 0.10209513999999997,
         0.10210671999999998, 0.10211828999999994, 0.10212986999999996,
         0.10214143999999992, 0.10215300999999999,
         0.10216459, 0.10217615999999996, 0.10218773999999997,
         0.10219930999999993, 0.10221088, 0.1022224599999999,
         0.10223402999999998, 0.10224560999999999, 0.10225717999999995,
         0.10226874999999991, 0.10228032999999992, 0.10229189999999999,
         0.10230348, 0.10231504999999996, 0.10232662999999997,
         0.10233819999999993, 0.10234977, 0.1023613499999999,
         0.10237291999999998, 0.10238449999999999, 0.10239606999999995,
         0.10240763999999991, 0.10241921999999992, 0.10243079,
         0.10244237, 0.10245393999999997, 0.10246550999999993,
         0.10247708999999994, 0.10248866000000001, 0.10250023999999991,
         0.10251180999999998, 0.10252337999999994, 0.10253495999999995,
         0.10254652999999991, 0.10255810999999992, 0.10256968,
         0.10258124999999996, 0.10259282999999997, 0.10260439999999993,
         0.10261597999999994, 0.10262755000000001, 0.10263912999999991,
         0.10265069999999998, 0.10266226999999994, 0.10267384999999996,
         0.10268541999999992, 0.10269699999999993, 0.10270857,
         0.10272013999999996, 0.10273171999999997, 0.10274328999999993,
         0.10275486999999994, 0.1027664399999999, 0.10277800999999998,
         0.10278958999999999, 0.10280115999999995, 0.10281273999999996,
         0.10282430999999992, 0.10283587999999999, 0.10284746,
         0.10285902999999996, 0.10287060999999997, 0.10288229999999998,
         0.10289375, 0.1029054399999999, 0.10291701999999991,
         0.10292858999999999, 0.10294017, 0.10295162999999996,
         0.10296330999999992, 0.10297488999999993, 0.10298646,
         0.1029980399999999, 0.10300960999999997, 0.10302106999999994,
         0.10303275999999995, 0.10304421999999991]*u.day, 5).tolist()
        )

        self.assertSequenceEqual(
        data.tolist()[1000:1100],
        [5.4209375*u.mL/u.s for number in range(100)]
        )

    def test_average_state(self):
        path = os.path.join(os.path.dirname(__file__), '.', 'data', '')
        avgs = average_state(["6-19-2013", "6-20-2013"], 1, 28, "mL/s", path)
        avgs = np.round(avgs, 5)
        self.assertSequenceEqual(
        avgs.tolist(),
        [5.5, 5.5, 5.5, 5.43125, 5.42094, 5.40908, 5.39544, 5.37976, 5.36172,
        5.34098, 5.31712, 5.28969, 5.5, 5.5, 5.5]*u.mL/u.s
        )

    def test_perform_function_on_state(self):
        path = os.path.join(os.path.dirname(__file__), '.', 'data', '')

        def avg_with_units(lst):
            num = np.size(lst)
            acc = 0
            for i in lst:
                acc = i + acc

            return acc / num

        avgs = perform_function_on_state(avg_with_units, ["6-19-2013", "6-20-2013"], 1, 28, "mL/s", path)
        avgs = np.round(avgs, 5)
        self.assertSequenceEqual(
        avgs.tolist(),
        [5.5, 5.5, 5.5, 5.43125, 5.42094, 5.40908, 5.39544, 5.37976, 5.36172,
        5.34098, 5.31712, 5.28969, 5.5, 5.5, 5.5]*u.mL/u.s
        )

    '''
    This test should open a plotting window. It has been commented out because
    is it not compatible with Travis tests

    def test_plot_state(self):
        path = os.path.join(os.path.dirname(__file__), '.', 'data', '')

        # make sure an error isn't raised since output of plot can't be tested
        plot_state(["6-19-2013", "6-20-2013"], 1, 28, path)
    '''

    def test_read_state_with_metafile(self):
        path = os.path.join(os.path.dirname(__file__), '.', 'data', 'Test Meta File.txt')

        def avg_with_units(lst):
            num = np.size(lst)
            acc = 0
            for i in lst:
                acc = i + acc

            return acc / num

        ids, answer = read_state_with_metafile(avg_with_units, 1, 28, path, [], ".xls", "mg/L")

        self.assertSequenceEqual(["1", "2"], ids.tolist())
        self.assertSequenceEqual([5.445427082723495, 5.459751965314751]*u.mg/u.L, answer)

    def test_write_calculations_to_csv(self):
        path = os.path.join(os.path.dirname(__file__), '.', 'data', 'Test Meta File.txt')
        out_path = os.path.join(os.path.dirname(__file__), '.', 'data', 'test_output.txt')

        def avg_with_units(lst):
            num = np.size(lst)
            acc = 0
            for i in lst:
                acc = i + acc

            return acc / num

        output = write_calculations_to_csv(avg_with_units, 1, 28, path,
                                           ["Average Conc (mg/L)"], out_path)

        self.assertSequenceEqual(["1", "2"], output['ID'].tolist())
        self.assertSequenceEqual(
        [5.445427082723495, 5.459751965314751],
        output['Average Conc (mg/L)'].tolist())
